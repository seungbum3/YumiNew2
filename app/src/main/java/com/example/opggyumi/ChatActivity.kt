package com.example.opggyumi

import android.graphics.Rect
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.view.ViewTreeObserver
import android.widget.Button
import android.widget.EditText
import android.widget.ImageButton
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.opggyumi.ChatAdapter
import com.example.opggyumi.ChatMessage
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore

class ChatActivity : AppCompatActivity() {

    private lateinit var chatRecyclerView: RecyclerView
    private lateinit var chatAdapter: ChatAdapter
    private lateinit var messageInput: EditText
    private lateinit var sendButton: Button
    private lateinit var chatTitle: TextView
    private lateinit var backButton: ImageButton

    private lateinit var chatId: String
    private lateinit var friendId: String
    private lateinit var friendNickname: String
    private lateinit var currentUserId: String

    private val messages = mutableListOf<ChatMessage>()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_chat)
        window.setSoftInputMode(android.view.WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)

        chatRecyclerView = findViewById(R.id.chatRecyclerView)
        chatAdapter = ChatAdapter(messages, FirebaseAuth.getInstance().currentUser?.uid ?: "")
        chatRecyclerView.adapter = chatAdapter
        chatRecyclerView.layoutManager = LinearLayoutManager(this)
        messageInput = findViewById(R.id.messageInput)
        sendButton = findViewById(R.id.sendButton)
        chatTitle = findViewById(R.id.chatTitle)
        backButton = findViewById(R.id.backButton)


        chatId = intent.getStringExtra("chatId") ?: ""
        Log.d("ChatActivity", "üìå Í∞ÄÏ†∏Ïò® chatId: $chatId")
        loadMessages(chatId)

        // ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú Ïú†Ï†Ä ID Í∞ÄÏ†∏Ïò§Í∏∞
        currentUserId = FirebaseAuth.getInstance().currentUser?.uid ?: ""

        if (currentUserId.isEmpty()) {
            finish()
            return
        }


        friendId = intent.getStringExtra("friendId") ?: ""
        friendNickname = intent.getStringExtra("friendNickname") ?: "Ïïå Ïàò ÏóÜÎäî ÏÇ¨Ïö©Ïûê"


        // Ï±ÑÌåÖÎ∞© ÏÉÅÎã® Ï†úÎ™© ÏπúÍµ¨ Ïù¥Î¶ÑÏúºÎ°ú
        chatTitle.text = friendNickname

        // Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº ÎèôÏûë
        backButton.setOnClickListener {
            finish()
        }

        chatRecyclerView.layoutManager = LinearLayoutManager(this)
        chatAdapter = ChatAdapter(mutableListOf(), currentUserId)
        chatRecyclerView.adapter = chatAdapter

        if (friendId.isNotEmpty()) {
            getOrCreateChatRoom(currentUserId, friendId) { chatRoomId ->
                chatId = chatRoomId
                loadMessages(chatId)
            }
        }

        sendButton.setOnClickListener {
            val message = messageInput.text.toString().trim()
            if (message.isNotEmpty() && ::chatId.isInitialized) {
                sendMessage(chatId, currentUserId, message)
                messageInput.setText("") // ÏûÖÎ†•Ï∞Ω Ï¥àÍ∏∞Ìôî
            }
            if (!::chatId.isInitialized) {
                Log.e("ChatActivity", "‚ö†Ô∏è chatIdÍ∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!")
                return@setOnClickListener
            }

        }

        val rootView = window.decorView.rootView
        rootView.viewTreeObserver.addOnGlobalLayoutListener(object :
            ViewTreeObserver.OnGlobalLayoutListener {
            override fun onGlobalLayout() {
                val rect = Rect()
                rootView.getWindowVisibleDisplayFrame(rect)
                val screenHeight = rootView.height
                val keypadHeight = screenHeight - rect.bottom

                if (keypadHeight > screenHeight * 0.15) { // ÌÇ§Î≥¥ÎìúÍ∞Ä Ïò¨ÎùºÏò® Í≤ΩÏö∞
                    chatRecyclerView.postDelayed({
                        chatRecyclerView.scrollToPosition(chatAdapter.itemCount - 1)
                    }, 100)
                }
            }
        })

        // Ïó¨Îü¨ Ï§Ñ ÏûÖÎ†• Ïãú ÎÜíÏù¥ Ï†úÌïúÌïòÏó¨ Î≤ÑÌäº ÏúÑÏπò Í≥†Ï†ï
        messageInput.addTextChangedListener(object : TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}

            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {
                messageInput.post {
                    val lineCount = messageInput.lineCount

                    if (lineCount in 1..5) { // 1~5Ï§ÑÍπåÏßÄ ÏûêÏó∞Ïä§ÎüΩÍ≤å ÌÅ¨Í∏∞ ÌôïÏû•
                        messageInput.layoutParams.height =
                            android.view.ViewGroup.LayoutParams.WRAP_CONTENT
                    } else if (lineCount > 5) { // 5Ï§Ñ Ïù¥ÏÉÅ ÏûÖÎ†•ÌïòÎ©¥ ÌÅ¨Í∏∞ Ïú†ÏßÄ & ÎÇ¥Î∂Ä Ïä§ÌÅ¨Î°§
                        messageInput.layoutParams.height =
                            messageInput.lineHeight * 5 + 20 // ÌÅ¨Í∏∞Î•º ÏïΩÍ∞Ñ ÌÇ§Ïõå 4Î≤àÏß∏ Ï§Ñ Í∏∞Ï§ÄÏúºÎ°ú ÎßûÏ∂§
                        messageInput.scrollTo(0, messageInput.bottom)
                    }
                    messageInput.requestLayout() // ÌÅ¨Í∏∞ Î≥ÄÍ≤Ω ÌõÑ Ï†ÅÏö©
                }
            }

            override fun afterTextChanged(s: Editable?) {}
        })




        messageInput.setOnFocusChangeListener { _, hasFocus ->
            if (hasFocus) {
                chatRecyclerView.postDelayed({
                    chatRecyclerView.scrollToPosition(chatAdapter.itemCount - 1)
                }, 300)
            }
        }

        sendButton.setOnClickListener {
            val message = messageInput.text.toString().trim()
            if (message.isNotEmpty() && ::chatId.isInitialized) {
                sendMessage(chatId, currentUserId, message)
                messageInput.setText("") // ÏûÖÎ†•Ï∞Ω Ï¥àÍ∏∞Ìôî
            }
        }
    }

    // Ï±ÑÌåÖÎ∞©ÏùÑ Ï∞æÍ±∞ÎÇò ÏÉùÏÑ±ÌïòÎäî Ìï®Ïàò
    private fun getOrCreateChatRoom(userA: String, userB: String, callback: (String) -> Unit) {
        if (userB.isEmpty()) {
            Log.e("ChatActivity", "‚ùå Ï±ÑÌåÖ ÏÉÅÎåÄ UIDÍ∞Ä ÎπÑÏñ¥ ÏûàÏùå!")
            return
        }

        val db = FirebaseFirestore.getInstance()
        val chatsRef = db.collection("chats")

        chatsRef.whereArrayContains("users", userA)
            .get()
            .addOnSuccessListener { documents ->
                for (document in documents) {
                    val users = document.get("users") as List<String>
                    if (users.contains(userB)) {
                        Log.d("ChatActivity", "‚úÖ Í∏∞Ï°¥ Ï±ÑÌåÖÎ∞© Ï∞æÏùå: ${document.id}")
                        callback(document.id)
                        return@addOnSuccessListener
                    }
                }
                // ÏÉà Ï±ÑÌåÖÎ∞© ÏÉùÏÑ±
                val newChatRef = chatsRef.document()
                val chatData = hashMapOf(
                    "users" to listOf(userA, userB),  // ‚úÖ Îëê Ïú†Ï†Ä Î™®Îëê Ìè¨Ìï®
                    "lastMessage" to "",
                    "updatedAt" to com.google.firebase.Timestamp.now()
                )
                newChatRef.set(chatData)
                    .addOnSuccessListener {
                        Log.d(
                            "ChatActivity",
                            "‚úÖ ÏÉà Ï±ÑÌåÖÎ∞© ÏÉùÏÑ±: ${newChatRef.id}, users: [$userA, $userB]"
                        )
                        callback(newChatRef.id)
                    }
                    .addOnFailureListener { e ->
                        Log.e("ChatActivity", "‚ùå Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± Ïã§Ìå®", e)
                    }
            }
    }


    // Î©îÏãúÏßÄ Ï†ÑÏÜ° Ìï®Ïàò
    private fun sendMessage(chatId: String, senderId: String, message: String) {
        val db = FirebaseFirestore.getInstance()
        val messageRef = db.collection("chats").document(chatId).collection("messages").document()

        val messageData = hashMapOf(
            "senderId" to senderId,
            "message" to message, // ‚úÖ Firestore ÌïÑÎìúÎ™ÖÍ≥º ÏùºÏπò
            "timestamp" to com.google.firebase.Timestamp.now()
        )

        messageRef.set(messageData)
            .addOnSuccessListener {
                Log.d("ChatActivity", "‚úÖ Î©îÏãúÏßÄ Ï†ÑÏÜ° ÏÑ±Í≥µ: $message")

                runOnUiThread {
                    chatAdapter.updateMessages(messages)
                    chatRecyclerView.scrollToPosition(messages.size - 1)
                    Log.d("ChatActivity", "üì¢ RecyclerView ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å")
                }


            }
            .addOnFailureListener { e ->
                Log.e("ChatActivity", "‚ùå Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®", e)
            }

        db.collection("chats").document(chatId)
            .update(mapOf(
                "lastMessage" to message,
                "updatedAt" to com.google.firebase.Timestamp.now()
            ))
            .addOnSuccessListener {
                Log.d("ChatActivity", "‚úÖ Ï±ÑÌåÖÎ∞© Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å")
            }
            .addOnFailureListener { e ->
                Log.e("ChatActivity", "‚ùå Ï±ÑÌåÖÎ∞© Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®", e)
            }
    }


    // Ï±ÑÌåÖ ÎÇ¥Ïó≠ Î∂àÎü¨Ïò§Í∏∞ Ìï®Ïàò
    private fun loadMessages(chatId: String) {
        Log.d("ChatActivity", "üì• loadMessages() Ìò∏Ï∂úÎê® - chatId: $chatId")
        val db = FirebaseFirestore.getInstance()
        val messagesRef = db.collection("chats").document(chatId).collection("messages")

        messagesRef.orderBy("timestamp")
            .addSnapshotListener { snapshots, e ->
                if (e != null) {
                    Log.e("ChatActivity", "‚ùå Î©îÏãúÏßÄ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå®", e)
                    return@addSnapshotListener
                }

                if (snapshots == null || snapshots.isEmpty) {
                    Log.d("ChatActivity", "üì≠ Î∂àÎü¨Ïò® Î©îÏãúÏßÄÍ∞Ä ÏóÜÏùå")
                    return@addSnapshotListener
                }

                Log.d("ChatActivity", "‚úÖ Î∂àÎü¨Ïò® Î©îÏãúÏßÄ Í∞úÏàò: ${snapshots.size()}")

                // üìå Í∏∞Ï°¥ Î¶¨Ïä§Ìä∏Î•º ÏóÖÎç∞Ïù¥Ìä∏ÌïòÍ≥† RecyclerViewÏóê Î∞òÏòÅ
                messages.clear()
                for (doc in snapshots.documents) {
                    val message = doc.toObject(ChatMessage::class.java)
                    if (message != null) {
                        Log.d("ChatActivity", "üì© Î©îÏãúÏßÄ Î°úÎìú: ${message.message}")
                        messages.add(message)
                    } else {
                        Log.e("ChatActivity", "‚ùå Î©îÏãúÏßÄ Î≥ÄÌôò Ïã§Ìå® - Î¨∏ÏÑú ID: ${doc.id}")
                    }
                }

                // üìå UI ÏóÖÎç∞Ïù¥Ìä∏ (ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÎ•º RecyclerViewÏóê ÌëúÏãú)
                runOnUiThread {
                    chatAdapter.updateMessages(messages)
                    chatRecyclerView.scrollToPosition(messages.size - 1)
                    Log.d("ChatActivity", "üì¢ RecyclerView ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å")
                }

            }
    }
}
